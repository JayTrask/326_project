# Generated by Django 2.1.3 on 2018-11-27 05:32

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('HiveList', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Artist',
            fields=[
                ('artist_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique ID for this particular Song across entire site', primary_key=True, serialize=False)),
                ('artist_name', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Contributors',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contributor_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Playlist',
            fields=[
                ('playlist_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique ID for this particular Playlist across entire site', primary_key=True, serialize=False)),
                ('playlist_name', models.CharField(help_text='Enter a title for the playlist (e.g. Meat Bird Execution Playlist)', max_length=200)),
                ('playlist_creation_date', models.DateField(auto_now_add=True)),
                ('playlist_description', models.TextField(help_text='Enter description for playlist', max_length=1000)),
                ('playlist_ranking', models.IntegerField(default=0)),
                ('playlist_votingthreshold', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(1)])),
                ('playlist_is_private', models.BooleanField(default=False)),
                ('playlist_vote_time', models.DateField(blank=True, null=True)),
                ('playlist_creator_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': (('can_contribute', 'Contribute songs'),),
            },
        ),
        migrations.CreateModel(
            name='Song',
            fields=[
                ('title', models.CharField(max_length=200)),
                ('song_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique ID for this particular Song across entire site', primary_key=True, serialize=False)),
                ('artist', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='HiveList.Artist')),
                ('genre', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='HiveList.Genre')),
            ],
        ),
        migrations.CreateModel(
            name='SongInstance',
            fields=[
                ('song_instance_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique ID for this particular Song Instance', primary_key=True, serialize=False)),
                ('number_yes_votes', models.IntegerField(default=0)),
                ('number_no_votes', models.IntegerField(default=0)),
                ('adder_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('playlist_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='HiveList.Playlist')),
                ('song_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='HiveList.Song')),
            ],
        ),
        migrations.AddField(
            model_name='contributors',
            name='playlist_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='HiveList.Playlist'),
        ),
    ]
